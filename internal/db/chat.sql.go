// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chat.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (id, user_id, title, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, user_id, title, created_at, updated_at
`

type CreateChatParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Title     sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, createChat,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChats = `-- name: GetChats :many
SELECT id, user_id, title, created_at, updated_at FROM chats
`

func (q *Queries) GetChats(ctx context.Context) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
